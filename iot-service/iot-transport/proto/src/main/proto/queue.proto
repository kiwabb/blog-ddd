syntax = "proto3";
package transport;
option java_package = "com.jackmouse.server.gen.transport";
option java_outer_classname = "TransportProtos";

enum SessionEvent {
  OPEN = 0;
  CLOSED = 1;
}

enum SessionType {
  SYNC = 0;
  ASYNC = 1;
}
message SessionCloseNotificationProto {
  string message = 1;
  SessionCloseReason reason = 2;
}
enum SessionCloseReason {
  UNKNOWN_REASON = 0;
  CREDENTIALS_UPDATED = 1;
  MAX_CONCURRENT_SESSIONS_LIMIT_REACHED = 2;
  SESSION_TIMEOUT = 3;
  RPC_DELIVERY_TIMEOUT = 4;
}
message GetAttributeResponseMsg {
  int32 requestId = 1;
  repeated TsKvProto clientAttributeList = 2;
  repeated TsKvProto sharedAttributeList = 3;
  bool isMultipleAttributesRequest = 4;
  string error = 5;
  bool sharedStateMsg = 6;
}
message TsKvProto {
  int64 ts = 1;
  KeyValueProto kv = 2;
  optional int64 version = 3;
}
message AttributeUpdateNotificationMsg {
  repeated TsKvProto sharedUpdated = 1;
  repeated string sharedDeleted = 2;
}
message ToDeviceRpcRequestMsg {
  int32 requestId = 1;
  string methodName = 2;
  string params = 3;
  int64 expirationTime = 4;
  int64 requestIdMSB = 5;
  int64 requestIdLSB = 6;
  bool oneway = 7;
  bool persisted = 8;
}
message ToServerRpcResponseMsg {
  int32 requestId = 1;
  string payload = 2;
  string error = 3;
}
message TenantProto {
  int64 tenantIdMSB = 1;
  int64 tenantIdLSB = 2;
  int64 createdTime = 3;
  string title = 4;
  optional string region = 5;
  int64 tenantProfileIdMSB = 6;
  int64 tenantProfileIdLSB = 7;
  optional string country = 8;
  optional string state = 9;
  optional string city = 10;
  optional string address = 11;
  optional string address2 = 12;
  optional string zip = 13;
  optional string phone = 14;
  optional string email = 15;
  optional string additionalInfo = 16;
  optional int64 version = 17;
}
message DeviceProto {
  int64 tenantIdMSB = 1;
  int64 tenantIdLSB = 2;
  int64 deviceIdMSB = 3;
  int64 deviceIdLSB = 4;
  int64 createdTime = 5;
  string deviceName = 6;
  optional string deviceLabel = 7;
  string deviceType = 8;
  optional string additionalInfo = 9;
  int64 deviceProfileIdMSB = 10;
  int64 deviceProfileIdLSB = 11;
  optional int64 customerIdMSB = 12;
  optional int64 customerIdLSB = 13;
  optional bytes deviceData = 14;
  optional int64 firmwareIdMSB = 15;
  optional int64 firmwareIdLSB = 16;
  optional int64 softwareIdMSB = 17;
  optional int64 softwareIdLSB = 18;
  optional int64 externalIdMSB = 19;
  optional int64 externalIdLSB = 20;
  optional int64 version = 21;
}
message EntityUpdateMsg {
  oneof entityUpdate {
    TenantProto tenant = 1;
    TenantProfileProto tenantProfile = 2;
    DeviceProto device = 3;
    DeviceProfileProto deviceProfile = 4;
    ApiUsageStateProto apiUsageState = 5;
  }
}

message EntityDeleteMsg {
  string entityType = 1;
  int64 entityIdMSB = 2;
  int64 entityIdLSB = 3;
}
message ToTransportUpdateCredentialsProto {
  repeated string credentialsId = 1;
  repeated string credentialsValue = 2;
}
message ResourceUpdateMsg {
  int64 tenantIdMSB = 1;
  int64 tenantIdLSB = 2;
  string resourceType = 3;
  string resourceKey = 4;
}

message ResourceDeleteMsg {
  int64 tenantIdMSB = 1;
  int64 tenantIdLSB = 2;
  string resourceType = 3;
  string resourceKey = 4;
}
message ToTransportMsg {
  int64 sessionIdMSB = 1;
  int64 sessionIdLSB = 2;
  SessionCloseNotificationProto sessionCloseNotification = 3;
  GetAttributeResponseMsg getAttributesResponse = 4;
  AttributeUpdateNotificationMsg attributeUpdateNotification = 5;
  ToDeviceRpcRequestMsg toDeviceRequest = 6;
  ToServerRpcResponseMsg toServerResponse = 7;
  EntityUpdateMsg entityUpdateMsg = 8;
  EntityDeleteMsg entityDeleteMsg = 9;
  ProvisionDeviceResponseMsg provisionResponse = 10;
  ToTransportUpdateCredentialsProto toTransportUpdateCredentialsNotification = 11;
  ResourceUpdateMsg resourceUpdateMsg = 12;
  ResourceDeleteMsg resourceDeleteMsg = 13;
  UplinkNotificationMsg uplinkNotificationMsg = 14;
  repeated QueueUpdateMsg queueUpdateMsgs = 15;
  repeated QueueDeleteMsg queueDeleteMsgs = 16;
}
message UplinkNotificationMsg {
  int64 uplinkTs = 1;
}
message QueueUpdateMsg {
  int64 tenantIdMSB = 1;
  int64 tenantIdLSB = 2;
  int64 queueIdMSB = 3;
  int64 queueIdLSB = 4;
  string queueName = 5;
  string queueTopic = 6;
  int32 partitions = 7;
  optional bool duplicateMsgToAllPartitions = 8;
}

message QueueDeleteMsg {
  int64 tenantIdMSB = 1;
  int64 tenantIdLSB = 2;
  int64 queueIdMSB = 3;
  int64 queueIdLSB = 4;
  string queueName = 5;
}
/**
 * Transport Service Data Structures;
 */
message SessionInfoProto {
  string nodeId = 1;
  int64 sessionIdMSB = 2;
  int64 sessionIdLSB = 3;
  int64 tenantIdMSB = 4;
  int64 tenantIdLSB = 5;
  int64 deviceIdMSB = 6;
  int64 deviceIdLSB = 7;
  string deviceName = 8;
  string deviceType = 9;
  int64 gwSessionIdMSB = 10;
  int64 gwSessionIdLSB = 11;
  int64 deviceProfileIdMSB = 12;
  int64 deviceProfileIdLSB = 13;
  int64 customerIdMSB = 14;
  int64 customerIdLSB = 15;
  optional int64 gatewayIdMSB = 16;
  optional int64 gatewayIdLSB = 17;
  bool isGateway = 18;
}
message ValidateDeviceTokenRequestMsg {
  string token = 1;
}
enum KeyValueType {
  BOOLEAN_V = 0;
  LONG_V = 1;
  DOUBLE_V = 2;
  STRING_V = 3;
  JSON_V = 4;
}
enum CredentialsType {
  ACCESS_TOKEN = 0;
  X509_CERTIFICATE = 1;
  MQTT_BASIC = 2;
  LWM2M_CREDENTIALS = 3;
}
message KeyValueProto {
  string key = 1;
  KeyValueType type = 2;
  bool bool_v = 3;
  int64 long_v = 4;
  double double_v = 5;
  string string_v = 6;
  string json_v = 7;
}
message TsKvListProto {
  int64 ts = 1;
  repeated KeyValueProto kv = 2;
}
message PostTelemetryMsg {
  repeated TsKvListProto tsKvList = 1;
}
/**
 * Transport Service Messages;
 */
message SessionEventMsg {
  SessionType sessionType = 1;
  SessionEvent event = 2;
}
message ValidateDeviceX509CertRequestMsg {
  string hash = 1;
}
message GetOrCreateDeviceFromGatewayRequestMsg {
  int64 gatewayIdMSB = 1;
  int64 gatewayIdLSB = 2;
  string deviceName = 3;
  string deviceType = 4;
}
message GetEntityProfileRequestMsg {
  string entityType = 1;
  int64 entityIdMSB = 2;
  int64 entityIdLSB = 3;
}
message LwM2MRegistrationRequestMsg {
  string tenantId = 1;
  string endpoint = 2;
}
message LwM2MRequestMsg {
  LwM2MRegistrationRequestMsg registrationMsg = 1;
}
message ValidateBasicMqttCredRequestMsg {
  string clientId = 1;
  string userName = 2;
  string password = 3;
}
message ProvisionDeviceCredentialsMsg {
  string provisionDeviceKey = 1;
  string provisionDeviceSecret = 2;
}
message CredentialsDataProto {
  ValidateDeviceTokenRequestMsg validateDeviceTokenRequestMsg = 1;
  ValidateDeviceX509CertRequestMsg validateDeviceX509CertRequestMsg = 2;
  ValidateBasicMqttCredRequestMsg validateBasicMqttCredRequestMsg = 3;
}
message ProvisionDeviceRequestMsg {
  string deviceName = 1;
  CredentialsType credentialsType = 2;
  ProvisionDeviceCredentialsMsg provisionDeviceCredentialsMsg = 3;
  CredentialsDataProto credentialsDataProto = 4;
  bool gateway = 5;
}
message ValidateDeviceLwM2MCredentialsRequestMsg {
  string credentialsId = 1;
}
message GetResourceRequestMsg {
  int64 tenantIdMSB = 1;
  int64 tenantIdLSB = 2;
  string resourceType = 3;
  string resourceKey = 4;
}
message GetOtaPackageRequestMsg {
  int64 deviceIdMSB = 1;
  int64 deviceIdLSB = 2;
  int64 tenantIdMSB = 3;
  int64 tenantIdLSB = 4;
  string type = 5;
}
message GetSnmpDevicesRequestMsg {
  int32 page = 1;
  int32 pageSize = 2;
}

message GetSnmpDevicesResponseMsg {
  repeated string ids = 1;
  bool hasNextPage = 2;
}
message GetDeviceRequestMsg {
  int64 deviceIdMSB = 1;
  int64 deviceIdLSB = 2;
}
message GetDeviceCredentialsRequestMsg {
  int64 deviceIdMSB = 1;
  int64 deviceIdLSB = 2;
}
message GetAllQueueRoutingInfoRequestMsg {
}
message ValidateOrCreateDeviceX509CertRequestMsg {
  string certificateChain = 1;
}
message DeviceInfoProto {
  int64 tenantIdMSB = 1;
  int64 tenantIdLSB = 2;
  int64 deviceIdMSB = 3;
  int64 deviceIdLSB = 4;
  string deviceName = 5;
  string deviceType = 6;
  string additionalInfo = 7;
  int64 deviceProfileIdMSB = 8;
  int64 deviceProfileIdLSB = 9;
  int64 customerIdMSB = 10;
  int64 customerIdLSB = 11;
  string powerMode = 12;
  int64 edrxCycle = 13;
  int64 psmActivityTimer = 14;
  int64 pagingTransmissionWindow = 15;
  bool isGateway = 16;
}
message DeviceProfileProto {
  int64 tenantIdMSB = 1;
  int64 tenantIdLSB = 2;
  int64 deviceProfileIdMSB = 3;
  int64 deviceProfileIdLSB = 4;
  int64 createdTime = 5;
  string name = 6;
  optional string description = 7;
  optional string image = 8;
  bool isDefault = 9;
  string type = 10;
  string transportType = 11;
  string provisionType = 12;
  optional int64 defaultRuleChainIdMSB = 13;
  optional int64 defaultRuleChainIdLSB = 14;
  optional int64 defaultDashboardIdMSB = 15;
  optional int64 defaultDashboardIdLSB = 16;
  optional string defaultQueueName = 17;
  optional bytes deviceProfileData = 18;
  optional string provisionDeviceKey = 19;
  optional int64 firmwareIdMSB = 20;
  optional int64 firmwareIdLSB = 21;
  optional int64 softwareIdMSB = 22;
  optional int64 softwareIdLSB = 23;
  optional int64 defaultEdgeRuleChainIdMSB = 24;
  optional int64 defaultEdgeRuleChainIdLSB = 25;
  optional int64 externalIdMSB = 26;
  optional int64 externalIdLSB = 27;
  optional int64 version = 28;
}
message ValidateDeviceCredentialsResponseMsg {
  DeviceInfoProto deviceInfo = 1;
  string credentialsBody = 2;
  DeviceProfileProto deviceProfile = 3;
}
message GetOrCreateDeviceFromGatewayResponseMsg {
  DeviceInfoProto deviceInfo = 1;
  DeviceProfileProto deviceProfile = 2;
  TransportApiRequestErrorCode error = 3;
}
enum TransportApiRequestErrorCode {
  UNKNOWN_TRANSPORT_API_ERROR = 0;
  ENTITY_LIMIT = 1;
}
message GetEntityProfileResponseMsg {
  string entityType = 1;
  oneof data {
    TenantProfileProto tenantProfile = 2;
    DeviceProfileProto deviceProfile = 3;
  }
  ApiUsageStateProto apiState = 4;
}
message ApiUsageStateProto {
  int64 tenantProfileIdMSB = 1;
  int64 tenantProfileIdLSB = 2;
  int64 apiUsageStateIdMSB = 3;
  int64 apiUsageStateIdLSB = 4;
  int64 createdTime = 5;
  EntityTypeProto entityType = 6;
  int64 entityIdMSB = 7;
  int64 entityIdLSB = 8;
  string transportState = 9;
  string dbStorageState = 10;
  string reExecState = 11;
  string jsExecState = 12;
  string tbelExecState = 13;
  string emailExecState = 14;
  string smsExecState = 15;
  string alarmExecState = 16;
  int64 version = 17;
}
enum EntityTypeProto {
  UNSPECIFIED           = 0;
  TENANT                = 1;
  CUSTOMER              = 2;
  USER                  = 3;
  DASHBOARD             = 4;
  ASSET                 = 5;
  DEVICE                = 6;
  ALARM                 = 7;
  // next 3 reserved for PE;
  RULE_CHAIN            = 11;
  RULE_NODE             = 12;
  // next 2 reserved for PE;
  ENTITY_VIEW           = 15;
  WIDGETS_BUNDLE        = 16;
  WIDGET_TYPE           = 17;
  // next 2 reserved for PE;
  TENANT_PROFILE        = 20;
  DEVICE_PROFILE        = 21;
  ASSET_PROFILE         = 22;
  API_USAGE_STATE       = 23;
  TB_RESOURCE           = 24;
  OTA_PACKAGE           = 25;
  EDGE                  = 26;
  RPC                   = 27;
  QUEUE                 = 28;
  NOTIFICATION_TARGET   = 29;
  NOTIFICATION_TEMPLATE = 30;
  NOTIFICATION_REQUEST  = 31;
  NOTIFICATION          = 32;
  NOTIFICATION_RULE     = 33;
  QUEUE_STATS           = 34;
  OAUTH2_CLIENT         = 35;
  DOMAIN                = 36;
  MOBILE_APP            = 37;
  MOBILE_APP_BUNDLE     = 38;
  CALCULATED_FIELD      = 39;
  CALCULATED_FIELD_LINK = 40;
}
message TenantProfileProto {
  int64 tenantProfileIdMSB = 1;
  int64 tenantProfileIdLSB = 2;
  int64 createdTime = 3;
  string name = 4;
  optional string description = 5;
  bool isDefault = 6;
  bool isolatedTbRuleEngine = 7;
  optional bytes profileData = 8;
}
message ProvisionDeviceResponseMsg {
  ResponseStatus status = 1;
  CredentialsType credentialsType = 2;
  string credentialsValue = 3;
}
enum ResponseStatus {
  UNKNOWN = 0;
  SUCCESS = 1;
  NOT_FOUND = 2;
  FAILURE = 3;
}
message LwM2MResponseMsg {
  LwM2MRegistrationResponseMsg registrationMsg = 1;
}
message LwM2MRegistrationResponseMsg {
  DeviceInfoProto deviceInfo = 1;
}
message TbResourceProto {
  int64 tenantIdMSB = 1;
  int64 tenantIdLSB = 2;
  int64 resourceIdMSB = 3;
  int64 resourceIdLSB = 4;
  int64 createdTime = 5;
  string title = 6;
  string resourceType = 7;
  string resourceKey = 8;
  bool isPublic = 9;
  optional string publicResourceKey = 10;
  string searchText = 11;
  optional string etag = 12;
  string fileName = 13;
  optional string resourceDescriptor = 14;
  optional int64 externalIdMSB = 15;
  optional int64 externalIdLSB = 16;
  optional bytes data = 17;
  optional bytes preview = 18;
  optional string resourceSubType = 19;
}
message GetResourceResponseMsg {
  TbResourceProto resource = 1;
}
message GetOtaPackageResponseMsg {
  ResponseStatus responseStatus = 1;
  int64 otaPackageIdMSB = 2;
  int64 otaPackageIdLSB = 3;
  string type = 4;
  string title = 5;
  string version = 6;
  string contentType = 7;
  string fileName = 8;
}
message GetDeviceResponseMsg {
  int64 deviceProfileIdMSB = 1;
  int64 deviceProfileIdLSB = 2;
  //Json
  bytes deviceTransportConfiguration = 3;
}
message GetDeviceCredentialsResponseMsg {
  DeviceCredentialsProto deviceCredentialsData = 1;
}
message DeviceCredentialsProto {
  int64 credentialsIdMSB = 1;
  int64 credentialsIdLSB = 2;
  int64 createdTime = 3;
  int64 deviceIdMSB = 4;
  int64 deviceIdLSB = 5;
  CredentialsType credentialsType = 6;
  string credentialsId = 7;
  optional string credentialsValue = 8;
  optional int64 version = 9;
}
message GetQueueRoutingInfoResponseMsg {
  int64 tenantIdMSB = 1;
  int64 tenantIdLSB = 2;
  int64 queueIdMSB = 3;
  int64 queueIdLSB = 4;
  string queueName = 5;
  string queueTopic = 6;
  int32 partitions = 7;
  optional bool duplicateMsgToAllPartitions = 8;
}
/**
 * Main messages;
 */

/* Request from Transport Service to ThingsBoard Core Service */
message TransportApiRequestMsg {
  ValidateDeviceTokenRequestMsg validateTokenRequestMsg = 1;
  ValidateDeviceX509CertRequestMsg validateX509CertRequestMsg = 2;
  GetOrCreateDeviceFromGatewayRequestMsg getOrCreateDeviceRequestMsg = 3;
  GetEntityProfileRequestMsg entityProfileRequestMsg = 4;
  LwM2MRequestMsg lwM2MRequestMsg = 5;
  ValidateBasicMqttCredRequestMsg validateBasicMqttCredRequestMsg = 6;
  ProvisionDeviceRequestMsg provisionDeviceRequestMsg = 7;
  ValidateDeviceLwM2MCredentialsRequestMsg validateDeviceLwM2MCredentialsRequestMsg = 8;
  GetResourceRequestMsg resourceRequestMsg = 9;
  GetOtaPackageRequestMsg otaPackageRequestMsg = 10;
  GetSnmpDevicesRequestMsg snmpDevicesRequestMsg = 11;
  GetDeviceRequestMsg deviceRequestMsg = 12;
  GetDeviceCredentialsRequestMsg deviceCredentialsRequestMsg = 13;
  GetAllQueueRoutingInfoRequestMsg getAllQueueRoutingInfoRequestMsg = 14;
  ValidateOrCreateDeviceX509CertRequestMsg validateOrCreateX509CertRequestMsg = 15;
}

/* Response from ThingsBoard Core Service to Transport Service */
message TransportApiResponseMsg {
  ValidateDeviceCredentialsResponseMsg validateCredResponseMsg = 1;
  GetOrCreateDeviceFromGatewayResponseMsg getOrCreateDeviceResponseMsg = 2;
  GetEntityProfileResponseMsg entityProfileResponseMsg = 3;
  ProvisionDeviceResponseMsg provisionDeviceResponseMsg = 4;
  GetSnmpDevicesResponseMsg snmpDevicesResponseMsg = 5;
  LwM2MResponseMsg lwM2MResponseMsg = 6;
  GetResourceResponseMsg resourceResponseMsg = 7;
  GetOtaPackageResponseMsg otaPackageResponseMsg = 8;
  GetDeviceResponseMsg deviceResponseMsg = 9;
  GetDeviceCredentialsResponseMsg deviceCredentialsResponseMsg = 10;
  repeated GetQueueRoutingInfoResponseMsg getQueueRoutingInfoResponseMsgs = 11;
}

message SubscribeToAttributeUpdatesMsg {
  bool unsubscribe = 1;
  SessionType sessionType = 2;
}